#pragma once

#include <string>
#include <unordered_map>

#include "Input/Keycodes.h"

#include "Core/Core.h"

namespace Light {

	static std::string KeyToString(uint16_t keycode)
	{
		static std::unordered_map<uint16_t, std::string> KeyMap =
		{
#			define LT_KEYCODE_TO_KEYMAP(key) { key, #key },
			LT_KEYCODE_TO_KEYMAP(KEY_ESCAPE)
			LT_KEYCODE_TO_KEYMAP(KEY_0)
			LT_KEYCODE_TO_KEYMAP(KEY_1)
			LT_KEYCODE_TO_KEYMAP(KEY_2)
			LT_KEYCODE_TO_KEYMAP(KEY_3)
			LT_KEYCODE_TO_KEYMAP(KEY_4)
			LT_KEYCODE_TO_KEYMAP(KEY_5)
			LT_KEYCODE_TO_KEYMAP(KEY_6)
			LT_KEYCODE_TO_KEYMAP(KEY_7)
			LT_KEYCODE_TO_KEYMAP(KEY_8)
			LT_KEYCODE_TO_KEYMAP(KEY_9)
			LT_KEYCODE_TO_KEYMAP(KEY_A)
			LT_KEYCODE_TO_KEYMAP(KEY_B)
			LT_KEYCODE_TO_KEYMAP(KEY_C)
			LT_KEYCODE_TO_KEYMAP(KEY_D)
			LT_KEYCODE_TO_KEYMAP(KEY_E)
			LT_KEYCODE_TO_KEYMAP(KEY_F)
			LT_KEYCODE_TO_KEYMAP(KEY_G)
			LT_KEYCODE_TO_KEYMAP(KEY_H)
			LT_KEYCODE_TO_KEYMAP(KEY_I)
			LT_KEYCODE_TO_KEYMAP(KEY_J)
			LT_KEYCODE_TO_KEYMAP(KEY_K)
			LT_KEYCODE_TO_KEYMAP(KEY_L)
			LT_KEYCODE_TO_KEYMAP(KEY_M)
			LT_KEYCODE_TO_KEYMAP(KEY_N)
			LT_KEYCODE_TO_KEYMAP(KEY_O)
			LT_KEYCODE_TO_KEYMAP(KEY_P)
			LT_KEYCODE_TO_KEYMAP(KEY_Q)
			LT_KEYCODE_TO_KEYMAP(KEY_R)
			LT_KEYCODE_TO_KEYMAP(KEY_S)
			LT_KEYCODE_TO_KEYMAP(KEY_T)
			LT_KEYCODE_TO_KEYMAP(KEY_U)
			LT_KEYCODE_TO_KEYMAP(KEY_V)
			LT_KEYCODE_TO_KEYMAP(KEY_W)
			LT_KEYCODE_TO_KEYMAP(KEY_X)
			LT_KEYCODE_TO_KEYMAP(KEY_Y)
			LT_KEYCODE_TO_KEYMAP(KEY_Z)
			LT_KEYCODE_TO_KEYMAP(KEY_PLUS)
			LT_KEYCODE_TO_KEYMAP(KEY_COMMA)
			LT_KEYCODE_TO_KEYMAP(KEY_MINUS)
			LT_KEYCODE_TO_KEYMAP(KEY_PERIOD)
			LT_KEYCODE_TO_KEYMAP(KEY_SEMICOLON)
			LT_KEYCODE_TO_KEYMAP(KEY_SLASH)
			LT_KEYCODE_TO_KEYMAP(KEY_CONSOLE)
			LT_KEYCODE_TO_KEYMAP(KEY_LEFT_BRACKET)
			LT_KEYCODE_TO_KEYMAP(KEY_BACKSLASH)
			LT_KEYCODE_TO_KEYMAP(KEY_RIGHT_BRACKET)
			LT_KEYCODE_TO_KEYMAP(KEY_QUOTE)
			LT_KEYCODE_TO_KEYMAP(KEY_LSHIFT)
			LT_KEYCODE_TO_KEYMAP(KEY_RSHIFT)
			LT_KEYCODE_TO_KEYMAP(KEY_LCTRL)
			LT_KEYCODE_TO_KEYMAP(KEY_RCTRL)
			LT_KEYCODE_TO_KEYMAP(KEY_SPACE)
			LT_KEYCODE_TO_KEYMAP(ARR_LEFT)
			LT_KEYCODE_TO_KEYMAP(ARR_UP)
			LT_KEYCODE_TO_KEYMAP(ARR_RIGHT)
			LT_KEYCODE_TO_KEYMAP(ARR_DOWN)
			LT_KEYCODE_TO_KEYMAP(KEY_F1)
			LT_KEYCODE_TO_KEYMAP(KEY_F2)
			LT_KEYCODE_TO_KEYMAP(KEY_F3)
			LT_KEYCODE_TO_KEYMAP(KEY_F4)
			LT_KEYCODE_TO_KEYMAP(KEY_F5)
			LT_KEYCODE_TO_KEYMAP(KEY_F6)
			LT_KEYCODE_TO_KEYMAP(KEY_F7)
			LT_KEYCODE_TO_KEYMAP(KEY_F8)
			LT_KEYCODE_TO_KEYMAP(KEY_F9)
			LT_KEYCODE_TO_KEYMAP(KEY_F10)
			LT_KEYCODE_TO_KEYMAP(KEY_F11)
			LT_KEYCODE_TO_KEYMAP(KEY_F12)
			LT_KEYCODE_TO_KEYMAP(KP_0)
			LT_KEYCODE_TO_KEYMAP(KP_1)
			LT_KEYCODE_TO_KEYMAP(KP_2)
			LT_KEYCODE_TO_KEYMAP(KP_3)
			LT_KEYCODE_TO_KEYMAP(KP_4)
			LT_KEYCODE_TO_KEYMAP(KP_5)
			LT_KEYCODE_TO_KEYMAP(KP_6)
			LT_KEYCODE_TO_KEYMAP(KP_7)
			LT_KEYCODE_TO_KEYMAP(KP_8)
			LT_KEYCODE_TO_KEYMAP(KP_9)
			LT_KEYCODE_TO_KEYMAP(KP_DECIMAL)
			LT_KEYCODE_TO_KEYMAP(KP_SUBTRACT)
			LT_KEYCODE_TO_KEYMAP(KP_DIVIDE)
			LT_KEYCODE_TO_KEYMAP(KP_MULTIPLY)
			LT_KEYCODE_TO_KEYMAP(KP_ADD)
			LT_KEYCODE_TO_KEYMAP(KEY_CAPSLOCK)
			LT_KEYCODE_TO_KEYMAP(KEY_NUMLOCK)
			LT_KEYCODE_TO_KEYMAP(KEY_SCROLL)
			LT_KEYCODE_TO_KEYMAP(KEY_OS)
			LT_KEYCODE_TO_KEYMAP(BACKSPACE)
			LT_KEYCODE_TO_KEYMAP(KEY_TAB)
			LT_KEYCODE_TO_KEYMAP(KEY_ENTER)
			LT_KEYCODE_TO_KEYMAP(KEY_PAUSE)
			LT_KEYCODE_TO_KEYMAP(KEY_PAGEUP)
			LT_KEYCODE_TO_KEYMAP(KEY_PAGEDOWN)
			LT_KEYCODE_TO_KEYMAP(KEY_END)
			LT_KEYCODE_TO_KEYMAP(KEY_HOME)
			LT_KEYCODE_TO_KEYMAP(KEY_PRINT_SCREEN)
			LT_KEYCODE_TO_KEYMAP(KEY_INSERT)
			LT_KEYCODE_TO_KEYMAP(KEY_DELETE)
			LT_KEYCODE_TO_KEYMAP(KEY_MENU)
#			undef LT_KEYCODE_TO_KEYMAP
		};

		return KeyMap[keycode].empty() ? std::to_string(keycode) : KeyMap[keycode];
	}

}
