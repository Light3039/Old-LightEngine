#pragma once

#include <string>
#include <unordered_map>

#include "Input/InputCodes.h"

#include "Core/Core.h"

namespace Light {

	static std::string KeyToString(int keycode)
	{
		static std::unordered_map<int, std::string> KeyMap =
		{
#			define LT_KEYCODE_TO_KEYMAP(key) { key, #key },
			LT_KEYCODE_TO_KEYMAP(KEY_ESCAPE)
			LT_KEYCODE_TO_KEYMAP(KEY_0)
			LT_KEYCODE_TO_KEYMAP(KEY_1)
			LT_KEYCODE_TO_KEYMAP(KEY_2)
			LT_KEYCODE_TO_KEYMAP(KEY_3)
			LT_KEYCODE_TO_KEYMAP(KEY_4)
			LT_KEYCODE_TO_KEYMAP(KEY_5)
			LT_KEYCODE_TO_KEYMAP(KEY_6)
			LT_KEYCODE_TO_KEYMAP(KEY_7)
			LT_KEYCODE_TO_KEYMAP(KEY_8)
			LT_KEYCODE_TO_KEYMAP(KEY_9)
			LT_KEYCODE_TO_KEYMAP(KEY_A)
			LT_KEYCODE_TO_KEYMAP(KEY_B)
			LT_KEYCODE_TO_KEYMAP(KEY_C)
			LT_KEYCODE_TO_KEYMAP(KEY_D)
			LT_KEYCODE_TO_KEYMAP(KEY_E)
			LT_KEYCODE_TO_KEYMAP(KEY_F)
			LT_KEYCODE_TO_KEYMAP(KEY_G)
			LT_KEYCODE_TO_KEYMAP(KEY_H)
			LT_KEYCODE_TO_KEYMAP(KEY_I)
			LT_KEYCODE_TO_KEYMAP(KEY_J)
			LT_KEYCODE_TO_KEYMAP(KEY_K)
			LT_KEYCODE_TO_KEYMAP(KEY_L)
			LT_KEYCODE_TO_KEYMAP(KEY_M)
			LT_KEYCODE_TO_KEYMAP(KEY_N)
			LT_KEYCODE_TO_KEYMAP(KEY_O)
			LT_KEYCODE_TO_KEYMAP(KEY_P)
			LT_KEYCODE_TO_KEYMAP(KEY_Q)
			LT_KEYCODE_TO_KEYMAP(KEY_R)
			LT_KEYCODE_TO_KEYMAP(KEY_S)
			LT_KEYCODE_TO_KEYMAP(KEY_T)
			LT_KEYCODE_TO_KEYMAP(KEY_U)
			LT_KEYCODE_TO_KEYMAP(KEY_V)
			LT_KEYCODE_TO_KEYMAP(KEY_W)
			LT_KEYCODE_TO_KEYMAP(KEY_X)
			LT_KEYCODE_TO_KEYMAP(KEY_Y)
			LT_KEYCODE_TO_KEYMAP(KEY_Z)
			LT_KEYCODE_TO_KEYMAP(KEY_EQUAL)
			LT_KEYCODE_TO_KEYMAP(KEY_COMMA)
			LT_KEYCODE_TO_KEYMAP(KEY_MINUS)
			LT_KEYCODE_TO_KEYMAP(KEY_PERIOD)
			LT_KEYCODE_TO_KEYMAP(KEY_SEMICOLON)
			LT_KEYCODE_TO_KEYMAP(KEY_SLASH)
			LT_KEYCODE_TO_KEYMAP(KEY_GRAVE_ACCENT)
			LT_KEYCODE_TO_KEYMAP(KEY_LEFT_BRACKET)
			LT_KEYCODE_TO_KEYMAP(KEY_BACKSLASH)
			LT_KEYCODE_TO_KEYMAP(KEY_RIGHT_BRACKET)
			LT_KEYCODE_TO_KEYMAP(KEY_APOSTROPHE)
			LT_KEYCODE_TO_KEYMAP(KEY_LEFT_SHIFT)
			LT_KEYCODE_TO_KEYMAP(KEY_RIGHT_SHIFT)
			LT_KEYCODE_TO_KEYMAP(KEY_LEFT_CONTROL)
			LT_KEYCODE_TO_KEYMAP(KEY_RIGHT_CONTROL)
			LT_KEYCODE_TO_KEYMAP(KEY_SPACE)
			LT_KEYCODE_TO_KEYMAP(KEY_LEFT)
			LT_KEYCODE_TO_KEYMAP(KEY_UP)
			LT_KEYCODE_TO_KEYMAP(KEY_RIGHT)
			LT_KEYCODE_TO_KEYMAP(KEY_DOWN)
			LT_KEYCODE_TO_KEYMAP(KEY_F1)
			LT_KEYCODE_TO_KEYMAP(KEY_F2)
			LT_KEYCODE_TO_KEYMAP(KEY_F3)
			LT_KEYCODE_TO_KEYMAP(KEY_F4)
			LT_KEYCODE_TO_KEYMAP(KEY_F5)
			LT_KEYCODE_TO_KEYMAP(KEY_F6)
			LT_KEYCODE_TO_KEYMAP(KEY_F7)
			LT_KEYCODE_TO_KEYMAP(KEY_F8)
			LT_KEYCODE_TO_KEYMAP(KEY_F9)
			LT_KEYCODE_TO_KEYMAP(KEY_F10)
			LT_KEYCODE_TO_KEYMAP(KEY_F11)
			LT_KEYCODE_TO_KEYMAP(KEY_F12)
			LT_KEYCODE_TO_KEYMAP(KEY_KP_0)
			LT_KEYCODE_TO_KEYMAP(KEY_KP_1)
			LT_KEYCODE_TO_KEYMAP(KEY_KP_2)
			LT_KEYCODE_TO_KEYMAP(KEY_KP_3)
			LT_KEYCODE_TO_KEYMAP(KEY_KP_4)
			LT_KEYCODE_TO_KEYMAP(KEY_KP_5)
			LT_KEYCODE_TO_KEYMAP(KEY_KP_6)
			LT_KEYCODE_TO_KEYMAP(KEY_KP_7)
			LT_KEYCODE_TO_KEYMAP(KEY_KP_8)
			LT_KEYCODE_TO_KEYMAP(KEY_KP_9)
			LT_KEYCODE_TO_KEYMAP(KEY_KP_DECIMAL)
			LT_KEYCODE_TO_KEYMAP(KEY_KP_SUBTRACT)
			LT_KEYCODE_TO_KEYMAP(KEY_KP_DIVIDE)
			LT_KEYCODE_TO_KEYMAP(KEY_KP_MULTIPLY)
			LT_KEYCODE_TO_KEYMAP(KEY_KP_ADD)
			LT_KEYCODE_TO_KEYMAP(KEY_CAPS_LOCK)
			LT_KEYCODE_TO_KEYMAP(KEY_NUM_LOCK)
			LT_KEYCODE_TO_KEYMAP(KEY_SCROLL_LOCK)
			LT_KEYCODE_TO_KEYMAP(KEY_LEFT_SUPER)
			LT_KEYCODE_TO_KEYMAP(KEY_RIGHT_SUPER)
			LT_KEYCODE_TO_KEYMAP(KEY_BACKSPACE)
			LT_KEYCODE_TO_KEYMAP(KEY_TAB)
			LT_KEYCODE_TO_KEYMAP(KEY_ENTER)
			LT_KEYCODE_TO_KEYMAP(KEY_PAUSE)
			LT_KEYCODE_TO_KEYMAP(KEY_PAGE_UP)
			LT_KEYCODE_TO_KEYMAP(KEY_PAGE_DOWN)
			LT_KEYCODE_TO_KEYMAP(KEY_END)
			LT_KEYCODE_TO_KEYMAP(KEY_HOME)
			LT_KEYCODE_TO_KEYMAP(KEY_PRINT_SCREEN)
			LT_KEYCODE_TO_KEYMAP(KEY_INSERT)
			LT_KEYCODE_TO_KEYMAP(KEY_DELETE)
			LT_KEYCODE_TO_KEYMAP(KEY_MENU)
#			undef LT_KEYCODE_TO_KEYMAP
		};

		return KeyMap[keycode].empty() ? std::to_string(keycode) : KeyMap[keycode];
	}

	static std::string ButtonToString(int button)
	{
		static std::unordered_map<int, std::string> ButtonMap =
		{
#           define LT_BUTTONCODE_TO_BUTTONMAP(button) { button, #button },
			LT_BUTTONCODE_TO_BUTTONMAP(MOUSE_BUTTON_1)
			LT_BUTTONCODE_TO_BUTTONMAP(MOUSE_BUTTON_2)
			LT_BUTTONCODE_TO_BUTTONMAP(MOUSE_BUTTON_3)
			LT_BUTTONCODE_TO_BUTTONMAP(MOUSE_BUTTON_4)
			LT_BUTTONCODE_TO_BUTTONMAP(MOUSE_BUTTON_5)
			LT_BUTTONCODE_TO_BUTTONMAP(MOUSE_BUTTON_6)
			LT_BUTTONCODE_TO_BUTTONMAP(MOUSE_BUTTON_7)
			LT_BUTTONCODE_TO_BUTTONMAP(MOUSE_BUTTON_8)
#			undef LT_BUTTONCODE_TO_KEYMAP
		};

		return ButtonMap[button].empty() ? std::to_string(button) : ButtonMap[button];
	}

}
